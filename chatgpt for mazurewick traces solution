

Great focus. Let's look specifically at **why and how the number of clocks affects the size and number of region-states per location**, and therefore the **tuple size** in your DTN-style symbolic exploration.


Excellent question. Let‚Äôs unpack it carefully.

You're asking:

> If we allow multiple regions per location in a tuple (to fix the counterexample), **can the number of region-states per tuple be bounded polynomially in the size of the timed automaton (TA)?**

---

## üéØ Goal:

To ensure that the symbolic state space used in the DTN-style **tuple-based exploration** remains **polynomial in the size of the TA** ‚Äî even while maintaining correctness (i.e., allowing concurrent transitions as your counterexample shows is necessary).

---

## ‚ú≥Ô∏è Key Parameters:

Let‚Äôs denote:

* $|Q|$: number of locations in the TA.
* $|C|$: number of clocks.
* $M$: maximal constant used in guards.
* $R$: number of **regions** per location = $O(M^{|C|} \cdot |C|!)$
* In the region abstraction, each location can be paired with $R$ different regions.

---

## üîç Analysis:

### ‚úÖ If you store **one region per location**, the tuple size is at most $|Q|$, so total number of tuples is $O(R^{|Q|})$, which is **exponential**.

But your goal is stronger:

> You want **each individual tuple** (i.e., symbolic configuration) to be **polynomial-sized**, ideally in terms of **number of locations/clocks/constants**.

---

### ‚ùå Allowing arbitrary **sets of regions per location** breaks this:

* You may need to store $\Theta(R)$ regions **per location**, leading to tuple size $\Theta(|Q| \cdot R)$, which is **not polynomial** (since $R$ is exponential in $|C|$).

So the naive solution (store all reachable region-states per location) is **not polynomial-sized**.

---

## ‚úÖ A Controlled Fix:

You **can** aim for polynomial-sized tuples if you **carefully restrict the number of region-states per location** while preserving correctness. Here‚Äôs one promising idea:

### üî∏ Use **independence-based region merging**:

* Only include **region-states that correspond to transitions enabled concurrently**.
* For each location $q$, store **a set of region-states $\{r_1, \ldots, r_k\}$** where the transitions to each $(q, r_i)$ were **independent** (in the Mazurkiewicz trace sense, or commutativity).
* Limit $k$ to be the number of **independent transitions** from any given configuration ‚Äî typically **bounded by out-degree** and number of clocks.

Thus, the size of the tuple becomes:

$$
O\left(\sum_{q \in Q} \text{# concurrent transitions leading to } q\right)
$$

which can be **polynomial in size of TA** if:

* Number of clocks is small (fixed parameter),
* Transitions are structured (bounded fan-out),
* We avoid storing all region combinations.

---

## ‚úÖ Final Answer:

> **Yes**, it is possible to construct a tuple representation that is:
>
> * **Polynomial-sized per configuration**, and
> * **Correct** (i.e., allows multiple region-states per location when needed),
>
> **if** you carefully restrict region-states to only those arising from **concurrent, independent transitions**.

Would you like help designing such a symbolic tuple structure or abstract algorithm that keeps this guarantee?

## üß≠ Quick Recap:

You want to build symbolic configurations (tuples of region-states), one per layer, such that:

* They include all region-states reachable **without delay** from previous configurations,
* But their total size remains **polynomial** in the TA size.

You're allowing **multiple region-states per location** only to preserve soundness (as your counterexample shows). Now the concern is: does the **number of clocks $|C|$** cause this to blow up?

---

## üß© How Clocks Impact the Number of Region-States

Each **region** is an equivalence class of clock valuations under the region abstraction. The total number of regions is:

$$
|\mathcal{R}| = O(M^{|C|} \cdot |C|!)
$$

where:

* $M$ is the maximal constant used in guards/invariants,
* $|C|$ is the number of clocks.

This grows **exponentially in the number of clocks**.

So, **per location $q$**, there can be up to $O(M^{|C|} \cdot |C|!)$ region-states $(q, r)$.

---

## üìå Back to Tuple Size

Now, consider this key idea:

> When building the next-layer tuple, you only want to store **those region-states $(q, r)$** that can be reached by **some discrete transition** fired from the current tuple.

For each such region-state, its **predecessor configuration** must satisfy:

* The transition's guard,
* The clock resets (producing the right region),
* And crucially, it must be **enabled concurrently** with others ‚Äî i.e., not in conflict.

Now:

* The **number of transitions** is a fixed part of the TA size.
* So in theory, you only need to track **one region per target $(q, r)$** **per transition**.
* But due to **clocks**, the **same target location $q$** may be reached in **many different regions** ‚Äî because **resets and guards split the space** finely.

This is where **number of clocks** matters:

* More clocks ‚Üí more region partitions ‚Üí more possible $(q, r)$ pairs per transition.

---

## üìâ Example:

Imagine one transition $q_0 \xrightarrow{\gamma, \lambda} q_1$, with:

* Guard $x = 1 \land y = 2$,
* Reset $\lambda = \{x\}$

Depending on whether $x, y$ have been reset before, and depending on delays (even 0-delay steps), the target region of $q_1$ could vary ‚Äî **especially if more clocks are involved** (e.g., $x, y, z, w$ all interact).

---

## ‚úÖ Why This Can Still Be Controlled:

If:

* You only include one successor $(q, r)$ per transition, and
* Only include **independent transitions** (e.g., those whose enabling does not block others),
* And avoid tracking all possible regions per $q$ in a tuple,

then:

* The number of region-states per location **can be bounded** by something like:

  $$
  O\left(d_q \cdot r_{\text{local}}\right)
  $$

  where:

  * $d_q$ is the out-degree of location $q$,
  * $r_{\text{local}}$ is number of **reachable** regions per transition ‚Äî which is **often small** unless $|C|$ is large.

So the whole tuple has size:

$$
O\left(\sum_q d_q \cdot r_{\text{local}}\right) = O(|\delta| \cdot r_{\text{local}})
$$

‚Äî **polynomial** if $r_{\text{local}}$ is small, i.e., if $|C|$ is small.

---

## ‚úçÔ∏è Summary

* Number of clocks affects **how finely the time domain is split into regions**.
* More clocks = more region-states per location = higher risk of tuple size blowup.
* If you limit to **independent transitions** and track only their target regions, tuple size is bounded by:

  $$
  O(\text{\# transitions} \times \text{\# regions per transition})
  $$
* This remains **polynomial in TA size** as long as $|C|$ is treated as a **parameter** (i.e., small/fixed).

---

Would you like help formalizing this into a lemma on polynomial boundedness of tuple size under fixed-clock assumptions?
